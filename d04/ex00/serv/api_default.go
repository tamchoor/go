/*
 * Candy Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

const (
	CE = 10
	AA = 15
	NT = 17
	DE = 21
	YR = 23
)

func countChange(order Order) int32 {
	var price int32 = 0
	if order.CandyType == "CE" {
		price = CE
	} else if order.CandyType == "AA" {
		price = AA
	} else if order.CandyType == "NT" {
		price = NT
	} else if order.CandyType == "DE" {
		price = DE
	} else if order.CandyType == "YR" {
		price = YR
	}
	change := order.Money - (price * order.CandyCount)
	return change

}

func processOrder(order Order) int {
	if order.Money <= 0 {
		return 0
	}
	if order.CandyCount <= 0 {
		return 0
	}
	if order.CandyType == "CE" {
		return 1
	} else if order.CandyType == "AA" {
		return 1
	} else if order.CandyType == "NT" {
		return 1
	} else if order.CandyType == "DE" {
		return 1
	} else if order.CandyType == "YR" {
		return 1
	}
	return 0

}

func BuyCandy(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	resBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		fmt.Println("Error ReadAll :", err)
		fmt.Fprintf(w, `{"some error in input data!"}`)
		return
	}
	fmt.Println(string(resBody))
	var order Order
	err = json.Unmarshal(resBody, &order)
	if err != nil {
		fmt.Println("Error Unmarshal :", err)
		fmt.Fprintf(w, `{"some error in input data!"}`)
		return
	}

	if processOrder(order) == 0 {
		var response InlineResponse400
		response.Error_ = "some error in input data!"
		convertByte, err := json.MarshalIndent(response, "", "    ")
		if err != nil {
			fmt.Println("Error MarshalIndent:", err)
			return
		}
		fmt.Fprintf(w, string(convertByte))
		return
	}
	fmt.Printf("Money %d\n", order.Money)
	fmt.Printf("CandyT %s\n", order.CandyType)
	fmt.Printf("CandyCount %d\n", order.CandyCount)

	change := countChange(order)
	if change >= 0 {
		var response InlineResponse201
		response.Thanks = "Thank you!"
		response.Change = change
		convertByte, err := json.MarshalIndent(response, "", "    ")
		if err != nil {
			fmt.Println("Error MarshalIndent:", err)
			return
		}
		fmt.Fprintf(w, string(convertByte))

	} else if change < 0 {
		var response InlineResponse402
		response.Error_ = "Not enough money!"
		convertByte, err := json.MarshalIndent(response, "", "    ")
		if err != nil {
			fmt.Println("Error MarshalIndent:", err)
			return
		}
		fmt.Fprintf(w, string(convertByte))
	}
}
